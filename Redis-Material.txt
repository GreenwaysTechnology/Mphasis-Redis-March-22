				Redis
..............................................................................................

What is Redis?
   Redis is an open source (BSD licensed), in-memory "data structure(List,Stack,LinkedList,Set,HashTable,Map") store

What is Data Structure?
  Organization of data based on structure.

Objective :
    - Store - write - IO
    - Process - IO , CPU
    - Report -read -IO

Store:
     1.Peristent : Permanent
       -Disk store
          -Files
             -Structured
                    -Database Management System/Relational Database System
			 -SQL-----------------------Reading,Processing,Write
             -Unstructured
                    -NOSQL Movement
		    -Big Data
     2.In Memory : not permant

In Memory Data Structure
  
   Storing data inside RAM
   Read data from RAM
   Processing data from RAM.
   Storing data in cpu register.
...........................................................................................
					NoSQL
..........................................................................................

Common Characteristics NOSQL

1.schemaless
  A schemaless database allows you to store any data

A schemaless database allows any data, structured with individual fields and structures, to be stored in the database.
Being schemaless reduces ceremony (you don't have to define schemas) and increases flexibility (you can store all sorts of data without prior definition)

The concept of "schema" also applies in-memory

Every programming language captures data in the form of "schema (plan)"

java:

class Customer {
  int id;
  String name;
  double invoiceValue;
}

Customer cust=new Customer();
cust.id =1; //storing data in memory

A class definition defines the logical fields you can use to manipulate it. This is effectively a schema.

One object can combine a schema and schemaless access.

class Customer {
  int id;
  String name;
  double invoiceValue;
}

Customer cust=new Customer();
cust.city = ""

2.Not using Relational model therory

3.Running on well on clusters 
    To enable fail over,High Avaiability

4.Open sources
...........................................................................................
Drawbacks of Relational DBs
- Impedance mismatch (In-memory(object) model of an application is different from (relational) model on disk). 

- That's why there are ORM frameworks which lead to loss of performance
- They are not designed to run efficiently on clusters

Why they are picking up now

- There is a movement away from using databases as integration points towards encapsulating databases within applications and integrating through (web) services.

- The vital factor for a change in data storage was the need to support large volumes of data by running on clusters.
- Relational DBs can be very costly to support large volume of data.
............................................................................................
				NoSQL data base Types
.............................................................................................

1.Key-value Store
2.Document based Store
3.Column Based Store
4.Graph based Store


1.Key-Value Store:
 
In this model, data is stored,processed based on the concept called "Key-value"
- Key-Value
 : based on data structure called "dictionary/map/hashmap/hashtable"

 KEY ------------>Value

 id 1000 -------> Subramanian

 id 2000--------->Murgan

Implementations:

1.Redis
2.Riak
3.Memcached
4.Hazelcast
5.Apache Ignite


2.Document based Store

A document database (also known as a document-oriented database or a document store) is a database that stores information in documents.

https://www.mongodb.com/document-databases

Document:
  Collection of information;
eg:
  SGML
  XML
  HTML
  JSON -

Implementations

1.Mongodb
2.CouchDB

3.Coloumn based store

   Colum oriented data base stores data based on columns

Hbase,Cassandra,Hypertable

4.Graph Databases
  Stores data based on datastructure called "tree/graph" model

Neo4j,Inifinte graph, OrientDB, FlockDB etc....
..............................................................................................
				  Redis - Remote Dictionary Server
..............................................................................................

It is key-value no sql data store.

Redis is polyglot data store.
  Redis can be used as database
  Redis can be used as cache solution.
  Redis can be used as "Message Broker"
..............................................................................................

How to install redis? Redis distribution

Mode of Distribution:

1.Open source - Redis.io
2.Commerical  - Redis cloud - redislabs


Redis Platform:
..............
Redis is officially available on unix,linux,bsd versions only.
redis is not available on windows.

Redis is available on windows 
-via docker.
-via third party - it is not stable.

Redis on Windows using Docker:
..............................

Lab 1 : how to start redis using docker


What is redis instance?

 Redis is a simple c program. Redis is written in c language.

What are the tools available in redis?

=>Redis server
    Process like traditional database and webservers.
  -default port 6379
  -default host localhost
  -standalone mode - by default

=>Redis client
   Software which connects redis server
 Most of the programming language who offers api to connect redis server.

Java
 Jedis
 lettuce 
 Spring boot integration.

redis-cli
  Redis command line tool to connect redis


How to start  redis server?

docker run --name some-redis redis

1:C 22 Mar 2022 13:26:47.062 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 22 Mar 2022 13:26:47.062 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
1:C 22 Mar 2022 13:26:47.062 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
1:M 22 Mar 2022 13:26:47.063 * monotonic clock: POSIX clock_gettime
1:M 22 Mar 2022 13:26:47.064 * Running mode=standalone, port=6379.
1:M 22 Mar 2022 13:26:47.064 # Server initialized
1:M 22 Mar 2022 13:26:47.064 * Ready to accept connections
  

Virtual Machine
Image - passive copy of os
container - Running copy of image

In docker world, every software is delivered as images.


How to connect redis using redis-cli?


docker exec -it my-redis redis-cli

Here we connect redis server with interactive mode

-it -interactive mode
my-redis => Name of the container
redis-cli => image/container

docker exec -it my-redis redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379>
.............................................................................................
Redis Architecture : Redis Components:
......................................

Relational databases such oracle/mysql/db2 stores data in the disk file.

Redis is storing data in the main memory - RAM. 
  Redis inmemory data store.

Since redis is in memory database, there is possiblity of data loss,Redis offers a concept of snapshot.

All in memory data is replicated into disk in a file: database file.
..............................................................................................
				Redis Server and Client Communication
..............................................................................................

Redis server and clients are communicated via redis protocal, redis protocal in tern uses TCP protocal.

Application Protocal:

Client-----RESP(REdis Serialization Protocal)------------------------Redis Server
            
Network Protocal:

Client-----------TCP------------------------Redis Server


..............................................................................................
				 Redis uses -> Request-Response Model
..............................................................................................

Redis clients sends sequence of "commands" with args or without args to Redis server.

Redis Server receives the commands, process the commands and a reply is sent back to client.

Redis offers lot of commands.

1.ping
  used to test server

2.echo
  used to echo the output

3.quit
   used to close the session with server

What is command?

 Command is in nutshell , it is c api(procedure/function)
..............................................................................................
				 How to store data inside redis
.............................................................................................

In RDBMS , data is stored in tables.
table is collection of row and columns

row indicates data
column indicates identifier
id name 
1  subramanian

id = 1
name =subramanian

In Redis data is stored in RAM
In redis data is stored in the form of data structure-Dictionary/Hashtable/Map -Key - value

Redis stores data in the key value pair- Redis data models

What is Key? What can be key?
 
 Key is unique indentifier which indifies the data.
 
What can be value?
  Value can be
 »»Strings
 »»Lists
 »»Sets
 »»Sorted sets
 »»Hashes
 »»Bit arrays
 »»Streams
 »»HyperLogLogs
  
How to store simple data?

Commands:
  SET KEY VALUE
  
127.0.0.1:6379> SET message "hello"
OK

How to read /get value ?

GET key

127.0.0.1:6379> SET message "hello"
OK
127.0.0.1:6379> GET message
"hello"
127.0.0.1:6379> SET id 1
OK
127.0.0.1:6379> GET id
"1"
127.0.0.1:6379> SET name "Subramanian"
OK
127.0.0.1:6379> GET name
"Subramanian"
127.0.0.1:6379>
//////////////////////////////////////////////////////////////////////////////////////////////
				Redis schema
..............................................................................................

Redis offers the database(schema), where all data is stored.

Redis has 16 logical databases, the default database starts with 0.
Redis database name starts with numbers 0 to 15.

127.0.0.1:6379> SELECT 1
OK
127.0.0.1:6379[1]> GET name
(nil)
127.0.0.1:6379[1]> SELECT 0
OK
127.0.0.1:6379> GET name
"Ram"
.............................................................................................
				  Keys
............................................................................................

1.Keys are the primary way to access data values within Redis.

2.The majority of Redis commands operate a key or keys,so it makes an excellent place to start.

3.Key names are unique by definition.

4.Key names are binary safe in Redis.

5.This means any binary sequence can be used as a key, anything from a simple string like Foo,
numbers like 42, or 3.1415, or a binary value.

127.0.0.1:6379> SET name Subramanian
OK
127.0.0.1:6379> SET 1 100
OK
127.0.0.1:6379> GET 1
"100"
127.0.0.1:6379> GET name
"Subramanian"
127.0.0.1:6379> SET true isValid
OK
127.0.0.1:6379> GET true
"isValid"
127.0.0.1:6379>

6.They can be up to 512 megabytes in size,and that may be increased in future versions of Redis.

7.However, super long keys are generally not recommended.

8.There is a trade-off between having reasonable key names versus the amounts of memory
used to store them.

9.Within a logical database, a single flat key space exists.

10.This means all the key names occupy the same space.

11.There is no automatic separation of key names into named groups such as buckets or collections.

12.Within a logical database, the key names are unique as mentioned.
But the same key name can appear in multiple logical databases,
so logical databases do provide separation of key names.

13.Typically, for Redis users, some type of structured key name
is used, often with a colon as a separator.
 
   user:1000:followers

   user - object
   1000 - unique identifier
   followers -composed object

 store information for user 1000 follower information.

  user:1000:followers 

   user - object
   1000 - unique identifier
   followers -composed object

 store information for user 100 follower information.

In this example, you can see how a key name is constructed.

We have used a mixture of tags like user and followers,
as well as actual values like the user ID of 1000.

The exact choice of how to structure these key names is down to the development team to choose.

This is an example of a typical convention used in the Redis community.

Since a key name is a binary sequence, by implication,
it's case sensitive.

 registerusers:1000:followers
 Registerusers:1000:followers
 RegisterUsers:1000:followers
 registerUsers:1000:followers

In this example, all three key names represent different keys.
The server is simply doing a binary comparison on the key name to determine if the key exists before it's retrieved or modified.
..............................................................................................

				SET KEY
................................................................................................

SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]

Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type. Any previous time to live associated with the key is discarded on successful SET operation.


The SET command supports a set of options that modify its behavior:

EX seconds -- Set the specified expire time, in seconds.
PX milliseconds -- Set the specified expire time, in milliseconds.
NX -- Only set the key if it does not already exist.
XX -- Only set the key if it already exist.
KEEPTTL -- Retain the time to live associated with the key.
GET -- Return the old value stored at key, or nil when key did not exist.



Set provides a way to store a value for a given key name.
We will discuss the additional parameters
to set later in this unit.

GET returns the value at the given key name.


GET KEY :
 Get value in the given key name.

SET customer:1000 fred

GET customer:1000

SET customer:1000 fred

Get keys names from existing database

Let's define a key for a first customer, Fred,
with the ID of 1000.

Note how Redis replies with an OK response.
We can get an individual key with the GET command.

Note that the CLI marks the response as string using
the double quotes convention.

We can now add our second key for customer Jane.

There are two commands for getting
a list of existing key names in your Redis database.
..............................................................................................
KEYS With Options: Timeout /  TTL - Time to Live
................................................

127.0.0.1:6379> SET message "hello" PX 100
OK
127.0.0.1:6379> get message
(nil)
127.0.0.1:6379> SET message "hello" PX 1000
OK
127.0.0.1:6379> get message
(nil)
127.0.0.1:6379> SET greet "hello" PX 5000
OK
127.0.0.1:6379> get message
(nil)
127.0.0.1:6379> get greet
(nil)
127.0.0.1:6379> SET greet "hello" PX 5000
OK
127.0.0.1:6379> get greet
"hello"
127.0.0.1:6379> get greet
..............................................................................................
				Key Managment commands
..............................................................................................

How to delete key?

->Manual Delete
->Auto delete

Manual Deletion:
................

DEL key [key ...]

Removes the specified keys. A key is ignored if it does not exist.

Return value
Integer reply: The number of keys that were removed.

-The DEL Command will remove the key and memory associated with the key.
-This is performed as a blocking opertion.

eg:

UnLink:
......
-With UNLINK, key is unlinked , hence the name of the  command and will no longer exists.
-The memory associated with the key value is reclaimed by an asynchronous process,so the UNLINK is a  non-blocking command.

eg:
 unlink customer:100

-We can use UNLINK to remove customer 1000.
-The return from the command is the number of keys removed in this case, 1.
-When you get a key that does not exist,nil is returned, as you can see here.

unlink customer:100
>nil
 You may have already spotted this already,but the key does not have to exist
before you can manipulate it.


There is no equivalent of create table
like you would see in relational databases.
When we execute the set command, on the key that does not exist,

it causes the key to be created, and the value to be set.

eg:
127.0.0.1:6379> Keys *
1) "user:2:name"
2) "user:1:name"
3) "name"
4) "user:3:name"
5) "id"
6) "true"
7) "1"
127.0.0.1:6379> del  1
(integer) 1
127.0.0.1:6379> Keys *
1) "user:2:name"
2) "user:1:name"
3) "name"
4) "user:3:name"
5) "id"
6) "true"
127.0.0.1:6379> unlink id
(integer) 1
127.0.0.1:6379> Keys *
1) "user:2:name"
2) "user:1:name"
3) "name"
4) "user:3:name"
5) "true"
127.0.0.1:6379>
.............................................................................................
				del vs unlink
del is blocking command
unlink is nonblocking command

.............................................................................................

However, there are times when you only want to set the value if the key already exists.

EXISTS key [key ...]

EXISTS customer:1000
127.0.0.1:6379> EXISTS customer:2000
(integer) 1
127.0.0.1:6379> EXISTS customer:9000
(integer) 0
127.0.0.1:6379>

it returns 1 for key present , 0 means no key present
.............................................................................................
				Exists and SET


Use case :
i want to set key only , if key does not exits -i want to create new only if key does not exits.
127.0.0.1:6379> EXISTS customer:9000
(integer) 0
127.0.0.1:6379> SET customer:9000 jane
OK

You could first check with the exist command to see if the key is present before using SET.

But having two operations-- the exists followed by a set--means "two round trips Redis" and possible inconsistencies between the operations.
.............................................................................................
				How to avoid sending two commands
.............................................................................................

SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]

NX -  for create
XX -  for update.

127.0.0.1:6379> get user:4:name
"John"
127.0.0.1:6379> SET user:4:name  foo NX
(nil)
127.0.0.1:6379> SET user:4:name  foo XX
OK
127.0.0.1:6379> get user:4:name
"foo"
127.0.0.1:6379> SET user:5:name  foo NX
OK
127.0.0.1:6379> get user:4:name
"foo"
127.0.0.1:6379> SET user:5:name  foo NX
(nil)
127.0.0.1:6379>
.............................................................................................
 			 Timeout - Define the life of any Key - TTL(Time to Live) - Expire
..............................................................................................

Generally keys are persitable, keys will not be deleted until we set the life time of keys.

Key can be deleted manually - del and unlink
Key can be deleted by timeout 

There are two patterns

1.when key is created we can define the life time of key

 SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]

2.After key defined, later we can define the timeout 

 EXPIRE key seconds [NX|XX|GT|LT]

NX – Set expiry only when the key has no expiry
XX – Set expiry only when the key has an existing expiry
GT – Set expiry only when the new expiry is greater than current one
LT – Set expiry only when the new expiry is less than current one

127.0.0.1:6379> EXPIRE user:4:name 10
(integer) 1
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"
127.0.0.1:6379> keys *
1) "user:4:name"
2) "user:2:name"
3) "user:1:name"
4) "user:3:name"
5) "customer:9000"

In the above example, we are verifying the key exitence through keys * command, but which is not recommended.

i have set key and its life time,how to know what is life of key. How long key can live still.

TTL - Get Life in seconds

PTTL -  GET LIFE in milli seconds

Returns the remaining time to live of a key that has a timeout. This introspection capability allows a Redis client to check how many seconds a given key will continue to be part of the dataset.

Integer reply: TTL in seconds, or a negative value in order to signal an error

The command returns -2 if the key does not exist.
The command returns -1 if the key exists but has no associated expire.
..............................................................................................	
				Values
..............................................................................................

How to store values and what are the different types of values?

Redis stores values in the form of datastructure.

Redis stores primitives values also.

Primitive Values

1.strings 
2.numbers

in order store values, we need data type.

Value type can be:
 »»Strings
 »»Lists
 »»Sets
 »»Sorted sets
 »»Hashes
 »»Bit arrays
 »»Streams
 »»HyperLogLogs

String:
 -store alphabets
 -store numbers
 -store binary.
no int,float datatype.

String is most fundamental basic value
It is binary safe,it can contain any type of data from numbers to images or seralized objects
String can store upto 512MB data in length

Strings are interally stores data into three forms

Int: If the value string can be converted to an integer, e.g. -2^63 ~ 2^63, Redis saves the value as an integer. This is the most efficient encoding.

Embeded String: If the size of the value string is less than or equal to 44 bytes, Redis saves the string in the same chunk of the Redis object itself. 
This is more memory efficient than the Raw String encoding. Also, it's more cache-friendly.

Raw String: Otherwise, Redis uses the raw encoding.

How to know the encoded type of key?

using Object command.

OBJECT ENCODING key

 Strings can be encoded as raw (normal string encoding) or int (strings representing integers in a 64 bit signed interval are encoded in this way in order to save space).

27.0.0.1:6379> SET Player:name Sachin
OK
127.0.0.1:6379> SET player:avg 4.5
OK
127.0.0.1:6379> SET player:score 90
OK
127.0.0.1:6379> SET Player:name "Sachin"
OK
127.0.0.1:6379> Object encoding Player:name
"embstr"
127.0.0.1:6379> Object encoding player:avg
"embstr"
127.0.0.1:6379> Object encoding Player:score
(nil)
127.0.0.1:6379> Object encoding player:score
"int"

Numerical Operations on values:
...............................
127.0.0.1:6379> INCR player:score
(integer) 91
127.0.0.1:6379> INCR player:score
(integer) 92
127.0.0.1:6379> INCR player:score
(integer) 93
127.0.0.1:6379> INCR player:score
(integer) 94
127.0.0.1:6379> INCR player:score
(integer) 95
127.0.0.1:6379> DECR player:score
(integer) 94
127.0.0.1:6379> DECR player:score
(integer) 93
127.0.0.1:6379> DECR player:score
(integer) 92
127.0.0.1:6379> INCRBYFLOAT player:avg 0.5
"5"
127.0.0.1:6379> INCRBYFLOAT player:avg 0.5
"5.5"
127.0.0.1:6379> INCRBYFLOAT player:avg 0.5
"6"
127.0.0.1:6379> INCRBYFLOAT player:avg 0.5
"6.5"
127.0.0.1:6379> INCRBYFLOAT player:avg 0.5
"7"
127.0.0.1:6379> INCRBYFLOAT player:avg 0.5
"7.5"
127.0.0.1:6379> INCR player:score
(integer) 93
127.0.0.1:6379> INCRBY player:score 6
(integer) 99
127.0.0.1:6379> INCRBY player:score 4
(integer) 103
127.0.0.1:6379> INCRBY player:score 2
(integer) 105
127.0.0.1:6379>

String Operations:
..................

String length -strlength
substring  -substr

127.0.0.1:6379> SET message  "hello how are you welcome"
OK
127.0.0.1:6379> STRLEN  message
(integer) 25
127.0.0.1:6379> GETRANGE message 0 3
"hell"
127.0.0.1:6379> GETRANGE message 5 3
""
127.0.0.1:6379> GETRANGE message 0 8
"hello how"
............................................................................................
				  List
............................................................................................

List is core datastructure, where we can add,delete,update,find elements in any order
List is used to create other applications -  stack,MessageQueues,PriorityQueue.

List stores data in the sequence of strings in the insertion order. You can add element at head or tail -  interally Lists are linked list.

Adding elements into list:

Left : head
 1,2,3,4,5,6,......

Right : tail

Stack
  - Last in first out
LPUSH
LPOP
Queue
  - First in first out
RPUSH
LPOP



127.0.0.1:6379> LPUSH message hello
(integer) 1
127.0.0.1:6379> LPUSH message world
(integer) 2
127.0.0.1:6379> LINDEX message 0
"world"
127.0.0.1:6379> LINDEX message 1
"hello"
127.0.0.1:6379> LOP message
(error) ERR unknown command `LOP`, with args beginning with: `message`,
127.0.0.1:6379> LPOP message
"world"
127.0.0.1:6379> LPOP message
"hello"
127.0.0.1:6379> LPOP message
(nil)
.............................................................................................
				  Set
.............................................................................................

Redis sets are an unordered collection of strings.
It is possible to add remove and test for elements.
Set avoids duplicates

Use cases:
You can track unique things like unique ip address visiting a given blog => How many users visited /view my blog.

//////////////////////////////////////////////////////////////////////////////////////////

Sets:
Unordered collection without duplicate values

offers mathmetical operations
1.intersection
2.difference 
3.union

Lab:
127.0.0.1:6379> SADD players:online 1
(integer) 1
127.0.0.1:6379> SADD players:online 2
(integer) 0
127.0.0.1:6379> SADD players:online 4
(integer) 1

1 -new values
0 -duplicate values

Get All players:
sscan players:online 0 MATCH *
1) "0"
2) 1) "1"
   2) "2"
   3) "4"
   4) "5"
   5) "10"
   6) "40"

How many players online??
127.0.0.1:6379> SCARD players:online

127.0.0.1:6379> SADD players:online 1
(integer) 1
127.0.0.1:6379> SADD players:online 2
(integer) 0
127.0.0.1:6379> SADD players:online 4
(integer) 1
127.0.0.1:6379> scan 0 MATCH players:online *
(error) ERR syntax error
127.0.0.1:6379> sscan 0 MATCH players:online *
(error) ERR invalid cursor
127.0.0.1:6379> sscan 0 MATCH players:online match *
(error) ERR invalid cursor
127.0.0.1:6379> sscan playlers:online 0 MATCH *
1) "0"
2) (empty array)
127.0.0.1:6379> sscan players:online 0 MATCH *
1) "0"
2) 1) "1"
   2) "2"
   3) "4"
   4) "5"
   5) "10"
127.0.0.1:6379> SADD players:online 4
(integer) 0
127.0.0.1:6379> SADD players:online 4
(integer) 0
127.0.0.1:6379> SADD players:online 40
(integer) 1
127.0.0.1:6379> SADD players:online 40
(integer) 0
127.0.0.1:6379> scan 0 MATCH players:online *
(error) ERR syntax error
127.0.0.1:6379> sscan players:online 0 MATCH *
1) "0"
2) 1) "1"
   2) "2"
   3) "4"
   4) "5"
   5) "10"
   6) "40"
127.0.0.1:6379> SCARD players:online
(integer) 6
127.0.0.1:6379> sismember players:online 1
(integer) 1
127.0.0.1:6379> sismember players:online 100
(integer) 0
127.0.0.1:6379> SCARD players:friends
(integer) 1
127.0.0.1:6379>  sinter players:online players:friends
1) "10"


Union : eleminate common elements

127.0.0.1:6379> sadd key1  a b c d e
(integer) 5
127.0.0.1:6379> sadd key2 c
(integer) 1
127.0.0.1:6379> sadd key3 f g c
(integer) 3
127.0.0.1:6379> sunion key1 key2 key3
1) "f"
2) "c"
3) "b"
4) "a"
5) "d"
6) "e"
7) "g"
127.0.0.1:6379>

//////////////////////////////////////////////////////////////////////////////////////////////
Sorted Set
Hash
BitMaps
....
Streams
HyperLogLogs
Redis Modules

Java Integration with Redis

Use cases:

1.Caching Server
2.Message Broker - Pub -Sub
3.Streaming
4.Redis as first class database like mysql
etc...

...............................................................................................

SortedSet:
  It sorts elements based on some condition.

Adding elements inside SortedSet:
127.0.0.1:6379>  ZADD tech 1 redis
(integer) 1
127.0.0.1:6379>  ZADD tech 2 mongo
(integer) 1
127.0.0.1:6379>  ZADD tech 3 mysql
(integer) 1
127.0.0.1:6379>  ZADD tech 4 mysql

How many elements are there in the SortedSet?
127.0.0.1:6379> ZCARD tech
(integer) 3
..............................................................................................
Hashes:
Hashes are used to store collections of key/value pairs. Contrast a
hash with a simple string data type where there is one value corresponding
to one key. A hash has one key, but then within that structure are more fields and values.

if you want to store data like json / table structure.

HSET key field value [field value ...]

127.0.0.1:6379> HSET user:1  firstName "subramanian" lastName "Murugan" city "coimbatore" status available
(integer) 4
127.0.0.1:6379> HGETALL user:1
1) "firstName"
2) "subramanian"
3) "lastName"
4) "Murugan"
5) "city"
6) "coimbatore"
7) "status"
8) "available"
127.0.0.1:6379> HGET user:1 firstName
"subramanian"
127.0.0.1:6379> HGET user:1 lastName
"Murugan"
127.0.0.1:6379> HGET user:1 city
"coimbatore"
127.0.0.1:6379> HGET user:1 status
"available"
127.0.0.1:6379> HSET user:1  firstName "Ram"
(integer) 0
127.0.0.1:6379> HSET user:1  country "India"
(integer) 1
127.0.0.1:6379> HGETALL user:1
 1) "firstName"
 2) "Ram"
 3) "lastName"
 4) "Murugan"
 5) "city"
 6) "coimbatore"
 7) "status"
 8) "available"
 9) "country"
10) "India"
127.0.0.1:6379> HMSET user:1 country "USA"
OK
127.0.0.1:6379> HGETALL user:1
 1) "firstName"
 2) "Ram"
 3) "lastName"
 4) "Murugan"
 5) "city"
 6) "coimbatore"
 7) "status"
 8) "available"
 9) "country"
10) "USA"
127.0.0.1:6379> HMSET user:1 state "Newyork"
OK
127.0.0.1:6379> HGETALL user:1
 1) "firstName"
 2) "Ram"
 3) "lastName"
 4) "Murugan"
 5) "city"
 6) "coimbatore"
 7) "status"
 8) "available"
 9) "country"
10) "USA"
11) "state"
12) "Newyork"
127.0.0.1:6379> HDEL user:1 state
(integer) 1
127.0.0.1:6379> HDEL user:1 state
(integer) 0
127.0.0.1:6379> HMSET user:1 rank 10
OK
127.0.0.1:6379> HGETALL user:1
 1) "firstName"
 2) "Ram"
 3) "lastName"
 4) "Murugan"
 5) "city"
 6) "coimbatore"
 7) "status"
 8) "available"
 9) "country"
10) "USA"
11) "rank"
12) "10"
127.0.0.1:6379> HINCRBY user:1 rank 5
(integer) 15
127.0.0.1:6379> HINCRBY user:1 rank 5
(integer) 20
127.0.0.1:6379> HGETALL user:1
 1) "firstName"
 2) "Ram"
 3) "lastName"
 4) "Murugan"
 5) "city"
 6) "coimbatore"
 7) "status"
 8) "available"
 9) "country"
10) "USA"
11) "rank"
12) "20"
127.0.0.1:6379> HHKEYS user:1
(error) ERR unknown command `HHKEYS`, with args beginning with: `user:1`,
127.0.0.1:6379> HKEYS user:1
1) "firstName"
2) "lastName"
3) "city"
4) "status"
5) "country"
6) "rank"
127.0.0.1:6379>
..............................................................................................
					Bit Maps
.............................................................................................

login 
  foo
  foo@123

28-03-22 - login ...logout... login...logout..
29-03-2 --
bitmaps:
BitMaps are  a data type used within Redis and represents a long list of bits that contain 0 by default and we can use SETBIT Command to flip to 1 or 0


Key                    Value                               type
	
a_bitmap     0 0 0  0 0 0 0 0 0 0 0 0 0 0                  binary string

bitmap can store up to 2pow 32 bits,about 4 billion items

Use case: login use case

SETBIT logins:2017:04 6 1

here login:2017:04 is key
6 is offset , typically userid as offset
1 is active bit

SETBIT logins:2017:04 6 1s


27.0.0.1:6379> SETBIT mon  1 1
(integer) 0
127.0.0.1:6379> SETBIT mon  2 0
(integer) 0
127.0.0.1:6379> GETBIT mon 1
(integer) 1
127.0.0.1:6379> GETBIT mon 2
(integer) 0
...........................................................................................
				  Redis Java Applications
............................................................................................

Redis java Clients:

1.Redisson 
2.Jedis
3.Lettuce


Redisson :
=>Redisson is a Redis Java client with features of In-Memory Data Grid. It provides more convenient and easiest way to work with Redis. Redisson objects provides a separation of concern, which allows you to keep focus on the data modeling and application logic.

Project Setup:
.............

1.create maven project.

2.Add maven dependencies
   <dependencies>
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson</artifactId>
            <version>3.17.0</version>
        </dependency>
    </dependencies>
3.Connect Redis Server.
 
Redis server is available in different modes

1.standalone mode
2.cluster mode
3.sentinal mode

1.standalone mode
docker run --name myredisserver --rm -it -p 6379:6379 redis

docker exec -it myredisserver redis-cli
127.0.0.1:6379> keys *
(empty array)
127.0.0.1:6379> set message "Hello"
OK

4.start coding

package com.mycom.redis;

import org.redisson.Redisson;
import org.redisson.api.RKeys;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import redis.clients.jedis.JedisPooled;

public class RedisApp {
    public static void main(String[] args) {
        //connects to default ip address and port
        Config config = new Config();
        config.useSingleServer()
                .setAddress("redis://127.0.0.1:6379");
        RedissonClient client = Redisson.create(config);
        RedissonClient redissonClient = Redisson.create(config);
        RKeys keys = redissonClient.getKeys();
        keys.getKeys().forEach(data -> System.out.println("keys" + data));

    }
}
............................................................................................

How to send key-value to redis server?

package com.mycom.redis.demos;

import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;

public class RedisconnectionUtil {
    static RedissonClient redissonClient;

    public static RedissonClient getClient() {
        Config config = new Config();
        config.useSingleServer()
                .setAddress("redis://127.0.0.1:6379");
        RedissonClient client = Redisson.create(config);
        redissonClient = Redisson.create(config);
        return redissonClient;
    }
}


package com.mycom.redis.demos;

import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;

public class SetSimpleValue {
    public static void main(String[] args) {
        RedissonClient redissonClient = RedisconnectionUtil.getClient();
        //send key and value .
        //create key
        RBucket<Object> bucket = redissonClient.getBucket("user:name");
        //set value
        bucket.set("subramanian");
        System.out.println( "key : => " + bucket.get());
      //  redissonClient.shutdown();
    }
}
27.0.0.1:6379> get user:1:name
"\x04>\x0bSubramanian"
127.0.0.1:6379>
you can see this output which is not serialized properly.

Data serialization:

	Data serialization is extensively used by Redisson to marshall and unmarshall bytes received or sent over network link with Redis server.
Many popular codecs are available for usage:

if you want to store data in plain string format?
org.redisson.client.codec.StringCodec	String codec


eg:
package com.mycom.redis.demos;

import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;
import org.redisson.client.codec.StringCodec;

public class SetSimpleValue {
    public static void main(String[] args) {
        RedissonClient redissonClient = RedisconnectionUtil.getClient();
        //send key and value .
        //create key
        RBucket<Object> bucket = redissonClient.getBucket("user:name", StringCodec.INSTANCE);
        //set value
        bucket.set("subramanian");
        System.out.println( "key : => " + bucket.get());
      //  redissonClient.shutdown();
    }
}
...........................................................................................
				How to set TTL 

package com.mycom.redis.demos;

import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;
import org.redisson.client.codec.StringCodec;

import java.util.concurrent.TimeUnit;

public class TimetoLiveKeys {
    public static void main(String[] args) {
        RedissonClient redissonClient = RedisconnectionUtil.getClient();
        RBucket<String> secretKey = redissonClient.getBucket("user:otp", StringCodec.INSTANCE);
        secretKey.set("3df45",50, TimeUnit.SECONDS);

        //extends
        secretKey.expire(60, TimeUnit.SECONDS);
        long remainTimeToLive = secretKey.remainTimeToLive();
        System.out.println(remainTimeToLive);

    }
}
...................................................................................

How to store Objects?


package com.mycom.redis.demos;

public class Customer {
    private  int id;
    private String name;
    private String city;

    public Customer() {
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", city='" + city + '\'' +
                '}';
    }

    public Customer(int id, String name, String city) {
        this.id = id;
        this.name = name;
        this.city = city;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}


package com.mycom.redis.demos;

import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;
import org.redisson.codec.TypedJsonJacksonCodec;

public class StoreObject {
    public static void main(String[] args) {
        RedissonClient redissonClient = RedisconnectionUtil.getClient();
        RBucket<Customer> bucket = redissonClient.getBucket("customer:info", new TypedJsonJacksonCodec(Customer.class));
        bucket.set(new Customer(1, "Subramanian", "Coimbatore"));
        Customer customer=bucket.get();
        System.out.println(customer.toString());

    }
}
..............................................................................................
			Send and Receives values using Reactive Extension
			   (Non blocking,Event Driven,Async)


package com.mycom.redis.demos;

import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.api.RedissonReactiveClient;
import org.redisson.config.Config;

public class RedisconnectionUtil {
    static RedissonClient redissonClient;

    public static RedissonClient getClient() {
        Config config = new Config();
        config.useSingleServer()
                .setAddress("redis://127.0.0.1:6379");
        RedissonClient client = Redisson.create(config);
        redissonClient = Redisson.create(config);
        return redissonClient;
    }
    public static RedissonReactiveClient getReactiveClient(){
        Config config = new Config();
        config.useSingleServer()
                .setAddress("redis://127.0.0.1:6379");
        RedissonClient client = Redisson.create(config);
        redissonClient = Redisson.create(config);
        return redissonClient.reactive();
    }
}
............................................................................................

Reddison:

Reddision communicates with Redis server in three mode

1.sync mode
2.async mode
3.Reactive mode

1.sync mode 
  In this mode commands are sent from app to redis, until response comes , the app is freezed.

RedissonClient client = Redisson.create(config);

RAtomicLong longObject = client.getAtomicLong('myLong');
// sync way
longObject.compareAndSet(3, 401);
set key counter 1000

Redis communication:
   
  Redis client-------commands----------------|
         OK  - Response

2.Async Mode
    In this mode commands are sent from the client to redis, app need not wait until response returned.
   
RFuture<Boolean> result = longObject.compareAndSetAsync(3, 401);

future.whenComplete((res, exception) -> {

    // handle both result and exception

});
// or
future.thenAccept(res -> {

    // handle result

}).exceptionally(exception -> {

    // handle exception

});

Reddision will not have value immediately , rather it will have future Object. you can register listern and you can wait for the result.


Reactive Way:

 Reactive Program is program which models "streams"

 data streams with async model.

 Reactive program offers a features to process data streams in realtime


Redisson exposes Reactive Streams API for most objects and based on two implementations:

1.Reactor

2.Rxjava

RedissonReactiveClient client = redissonClient.reactive();

RAtomicLongReactive atomicLong = client.getAtomicLong("myLong");
Mono<Boolean> cs = longObject.compareAndSet(10, 91);
Mono<Long> get = longObject.get();

get.doOnNext(res -> {
   // ...
}).subscribe();

............................................................................................

Project Reactor api:

1.Mono - emits 0..1  item
2.Flux  - emits 0..N items

   
package com.mycom.redis.demos;

import org.redisson.api.RAtomicLongReactive;
import reactor.core.publisher.Flux;

import java.time.Duration;

public class ReactiveClientUserVisit {
    public static void main(String[] args) {
        //redision
        RAtomicLongReactive atomicLong = RedisconnectionUtil.getReactiveClient()
                .getAtomicLong("user:visit:1");
        //reactor api
        Flux.range(1,50)
                .delayElements(Duration.ofSeconds(1)) //emit numbers after every 1 second
                .flatMap(integer -> atomicLong.incrementAndGet())
                .subscribe(System.out::println);

    }
}
..............................................................................................
				Sync and async
.............................................................................................
Sync work flow.

1.callapi1()-|
2.callapi2()-|
3.....


Async work flow:

1callasyncapi() -----
2.callotherapi()


package com.mycom.redis.demos;

import org.redisson.api.RAtomicLong;
import org.redisson.api.RFuture;

public class AsyncPattern {
    public static void getSync() {
        RAtomicLong longObject = RedisconnectionUtil.getClient().getAtomicLong("user:2:counter");
// sync way
        System.out.println("Start");
        boolean res = longObject.compareAndSet(9000, 9000);
        System.out.println(res);
        System.out.println("end");
    }

    public static void main(String[] args) {
          // getSync();
             getAsync();

    }

    private static void getAsync() {
        RAtomicLong longObject = RedisconnectionUtil.getClient().getAtomicLong("user:2:counter");
// sync way
        System.out.println("Start");
        RFuture<Boolean> booleanRFuture = longObject.compareAndSetAsync(9000, 9000);
        System.out.println("end");

        booleanRFuture.thenAccept(res -> {
            System.out.println("Got Result " + res);
        }).exceptionally(err -> {
            System.out.println("Got Error " + err);
            return null;
        });
    }
}
..............................................................................................
			How to avoid sending multiple keys sequentially - Multi Bucket
...........................................................................................
package com.mycom.redis.demos;

import org.redisson.client.codec.StringCodec;

public class MultiBucket {
    public static void main(String[] args) {
        RedisconnectionUtil.getReactiveClient()
                .getBuckets(StringCodec.INSTANCE)
                .get("user:1:name", "user:2:name", "user:3:name")
                .subscribe(System.out::println);
    }
}
.............................................................................................
				 Event driven Programming with Redis
                                   Redis keyspace notifications
                            Monitor changes to Redis keys and values in real time
.............................................................................................

Keyspace notifications allow clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way.

Examples of events that can be received are:

All the commands affecting a given key.
All the keys receiving an LPUSH operation.
All the keys expiring in the database 0.

Note: Redis Pub/Sub is fire and forget that is, if your Pub/Sub client disconnects, and reconnects later, all the events delivered during the time the client was disconnected are lost.

Syntax of event:

PUBLISH __keyspace@0__:mykey del

PUBLISH __keyevent@0__:del mykey

Redis by default will not publish /emit events, we need to configure /activate the events publisher.

Events:
K     Keyspace events, published with __keyspace@<db>__ prefix.
E     Keyevent events, published with __keyevent@<db>__ prefix.
g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
$     String commands
l     List commands
s     Set commands
h     Hash commands
z     Sorted set commands
t     Stream commands
d     Module key type events
x     Expired events (events generated every time a key expires)
e     Evicted events (events generated when a key is evicted for maxmemory)
m     Key miss events (events generated when a key that doesn't exist is accessed)
A     Alias for "g$lshztxed", so that the "AKE" string means all the events except "m".

Two ways :

1.via redis.conf file
2.via cli - through command
   config set notify-keyspace-events AKE


How to listen events inside app?
package com.mycom.redis.demos;

import org.redisson.api.ExpiredObjectListener;
import org.redisson.api.RBucketReactive;
import org.redisson.client.codec.StringCodec;

import java.util.concurrent.TimeUnit;

public class EventListeners {
    public static void main(String[] args) {
        RBucketReactive<String> bucket = RedisconnectionUtil.getReactiveClient().getBucket("user:1:name", StringCodec.INSTANCE);
        //setting value with 10 seconds ttl
        bucket.set("sam", 10, TimeUnit.SECONDS).subscribe();
        //Register listener which listens for redis events
//        bucket.addListener(new ExpiredObjectListener() {
//            @Override
//            public void onExpired(String s) {
//                System.out.println("Expired : " + s);
//            }
//        }).subscribe();
        bucket.addListener((ExpiredObjectListener) s -> System.out.println("Expired : " + s))
                .subscribe();

        try {
            Thread.sleep(11000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }
}
Key Deleted Event:
.................
package com.mycom.redis.demos;

import org.redisson.api.DeletedObjectListener;
import org.redisson.api.RBucketReactive;
import org.redisson.client.codec.StringCodec;
import reactor.core.publisher.Mono;


public class Demo {

    public static void main(String[] args) throws InterruptedException {
        RBucketReactive<String> bucket = RedisconnectionUtil.getReactiveClient().getBucket("user:1:name", StringCodec.INSTANCE);
        Mono<Void> set = bucket.set("sam");
        set.subscribe();

        Mono<Void> get = bucket.get()
                .doOnNext(System.out::println)
                .then();
        get.subscribe();
        Mono<Void> event = bucket.addListener(new DeletedObjectListener() {
            @Override
            public void onDeleted(String name) {
                System.out.println("Deleted : " + name);
            }
        }).then();
        event.block();

    }
}

test :
127.0.0.1:6379> get user:1:name
"sam"
127.0.0.1:6379> del user:1:name
(integer) 1
..............................................................................................
				 Hash -> RedissionMap

package com.mycom.redis.demos;

import org.redisson.api.RMap;
import org.redisson.api.RMapReactive;
import org.redisson.client.codec.StringCodec;
import org.redisson.codec.TypedJsonJacksonCodec;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

public class HashDataStructure {
    public static void main(String[] args) {
//        createReactiveHash();
//        createNormalHash();
//        createHashFromSet();
//        createHashFromJavaMap();
        createHashForObjects();
    }

    private static void createHashForObjects() {
        //how to prisit entity class
        TypedJsonJacksonCodec codec = new TypedJsonJacksonCodec(Integer.class, Student.class);
        RMapReactive<Integer, Student> map = RedisconnectionUtil.getReactiveClient().getMap("users", codec);
        Student student1 = new Student("sam", 10, "atlanta", List.of(1, 2, 3));
        Student student2 = new Student("jake", 30, "miami", List.of(10, 20, 30));

        map.put(1, student1).subscribe();
        map.put(2, student2).subscribe();
    }

    private static void createHashFromJavaMap() {
        RMapReactive<String, String> map = RedisconnectionUtil.getReactiveClient().getMap("user:5", StringCodec.INSTANCE);
        Map<String, String> javaMap = Map.of(
                "name", "jake",
                "age", "30",
                "city", "miami"
        );
        map.putAll(javaMap).then().subscribe();
    }



    private static void createHashFromSet() {
        RMap<String, String> map = RedisconnectionUtil.getClient().getMap("somekey", StringCodec.INSTANCE);
        map.put("1","hello");
        HashSet<String> hashSet = new HashSet<>();
        hashSet.add("1");
        Map<String, String> all = map.getAll(hashSet);
        all.values().forEach(System.out::println);
    }

    private static void createNormalHash() {
        RMap<String, String> map = RedisconnectionUtil.getClient().getMap("user:2:", StringCodec.INSTANCE);
        map.put("name", "subramanian");
        map.put("age", "42");
        map.put("city", "Coimbatore");
        map.values().forEach(System.out::println);

        //update
        map.put("age","40");
        map.values().forEach(System.out::println);

    }

    private static void createReactiveHash() {
        RMapReactive<Object, Object> map = RedisconnectionUtil.getReactiveClient().getMap("user:1", StringCodec.INSTANCE);
        //set values
        map.put("name", "sam").subscribe();
        map.put("age", "10").subscribe();
        map.put("city", "atlanta").subscribe();
        map.get("name").subscribe(System.out::println);
    }
}
.............................................................................................
How to expire single key in map?

package com.mycom.redis.demos;

import org.redisson.api.RMapCacheReactive;
import org.redisson.codec.TypedJsonJacksonCodec;

import java.util.List;
import java.util.concurrent.TimeUnit;

public class HashWithKeyExpire {
    public static void main(String[] args) {
        TypedJsonJacksonCodec codec = new TypedJsonJacksonCodec(Integer.class, Student.class);
        RMapCacheReactive<Integer, Student> mapCache = RedisconnectionUtil.getReactiveClient().getMapCache("users:cache", codec);
        //TTL For Hash keys
        Student student1 = new Student("sam", 10, "atlanta", List.of(1, 2, 3));
        Student student2 = new Student("jake", 30, "miami", List.of(10, 20, 30));

        mapCache.put(1,student1,5, TimeUnit.SECONDS).subscribe();
        mapCache.put(2, student2, 10, TimeUnit.SECONDS).subscribe();

    }
}


package com.mycom.redis.demos;

import org.redisson.api.RMapCacheReactive;
import org.redisson.codec.TypedJsonJacksonCodec;

import java.util.List;
import java.util.concurrent.TimeUnit;

public class HashWithKeyExpire {
    public static void main(String[] args) {
        TypedJsonJacksonCodec codec = new TypedJsonJacksonCodec(Integer.class, Student.class);
        RMapCacheReactive<Integer, Student> mapCache = RedisconnectionUtil.getReactiveClient().getMapCache("users:cache", codec);
        //TTL For Hash keys
        Student student1 = new Student("sam", 10, "atlanta", List.of(1, 2, 3));
        Student student2 = new Student("jake", 30, "miami", List.of(10, 20, 30));

        mapCache.put(1,student1,5, TimeUnit.SECONDS).subscribe();
        mapCache.put(2, student2, 10, TimeUnit.SECONDS).subscribe();

    }
}
............................................................................................
				 Building Cache Infrastructure
					using MapCache
...........................................................................................
					

package com.mycom.redis.demos;

import org.redisson.api.LocalCachedMapOptions;
import org.redisson.api.RLocalCachedMap;
import org.redisson.api.RedissonClient;
import org.redisson.codec.TypedJsonJacksonCodec;
import reactor.core.publisher.Flux;

import java.time.Duration;
import java.util.List;

public class ServiceOne {
    public static void main(String[] args) {
        RLocalCachedMap<Integer, Student> studentsMap;
        RedissonClient redissonClient = RedisconnectionUtil.getClient();
        //LocalCache Configuration
        LocalCachedMapOptions<Integer, Student> mapOptions = LocalCachedMapOptions
                .<Integer, Student>defaults()
                .syncStrategy(LocalCachedMapOptions.SyncStrategy.UPDATE)
                .reconnectionStrategy(LocalCachedMapOptions.ReconnectionStrategy.NONE);

        studentsMap = redissonClient.getLocalCachedMap(
                "students",
                new TypedJsonJacksonCodec(Integer.class, Student.class),
                mapOptions
        );
        Student student1 = new Student("sam", 10, "atlanta", List.of(1, 2, 3));
        Student student2 = new Student("jake", 30, "miami", List.of(10, 20, 30));
        studentsMap.put(1, student1);
        studentsMap.put(2, student2);

        Flux.interval(Duration.ofSeconds(1))
                .doOnNext(i -> System.out.println(i + " ==> " + studentsMap.get(1)))
                .blockLast();

        //sleep(600000);
    }

}

package com.mycom.redis.demos;
import org.redisson.api.LocalCachedMapOptions;
import org.redisson.api.RLocalCachedMap;
import org.redisson.api.RedissonClient;
import org.redisson.codec.TypedJsonJacksonCodec;

import java.util.List;

public class ServiceTwo {
    public static void main(String[] args) {
        RLocalCachedMap<Integer, Student> studentsMap;
        RedissonClient redissonClient = RedisconnectionUtil.getClient();

        LocalCachedMapOptions<Integer, Student> mapOptions = LocalCachedMapOptions.<Integer, Student>defaults()
                .syncStrategy(LocalCachedMapOptions.SyncStrategy.UPDATE)
                .reconnectionStrategy(LocalCachedMapOptions.ReconnectionStrategy.NONE);

        studentsMap = redissonClient.getLocalCachedMap(
                "students",
                new TypedJsonJacksonCodec(Integer.class, Student.class),
                mapOptions
        );
        Student student1 = new Student("sam", 10, "atlanta", List.of(1, 2, 3));
        //something change
        student1.setName("Subramanian M");
        studentsMap.put(1, student1);
    }
}




















